#########################################################
# Makefile - GCC
#########################################################
#
#
# Configurable options:
#
# nvidia_architecture
#  Values: fermi | kepler | maxwell | all
# "use all for generic code: Fermi and Kepler.
#
# nvidia_ptxas_otimize
#  Values: yes | no
# "enables -O3 optimization on ptax cuda regiters"
#
# openmp_on_cuda
#  Values: yes | no
# "Hybrid execution mode. OpenMP threads are added to
#  BFSruns processed with cuda"
#
# openmp_on_other_compilers
#  Values: yes | no
# "Hybrid execution mode. OpenMP threads are added to
#  other high O() code"
#
# manual_profiler_cuda
#  Values: yes | no
# "prints out information on initialization"
#
# manual_profiler_other_compilers
#  Values: yes | no
# "prints out results/ statistics at the end"
#
# custom_openmpi
#  Values: yes | no
# "use user compiled openmpi instead of system's"
#
# custom_openmpi_basedir
# Values: path
#  "if previous option is set, absolute path to dir"
#
# scorep_profiler_enable
#  Values: yes | no
# "is scorep has been installed, enable it on code"
#
# scorep_profiler_automatic_instrument
#  Values: yes | no
# "this option set to no enables manual instrumentation,
#  and reads the already added zones!
#
# scorep_custom
#  Values: yes | no
# "see open_mpi above. for scorep"
#
# scorep_custom_basedir
# Values: path
#  "see custom_openmpi_basedir option above"
#
# use_avx_instructions
#  Values: yes | no
#  "CPU SSExx and AMD compatibles (AVX) will be used
#   to compile files"
#
# enable_simd_compression
#  Values: yes | no
#  "MPI packets will be sent compressed by using
#   D. Lemire SIMDCompression library"
#
# debug
#  Values: yes | no
# "Provides extra data in runtime execution.
#  recorded in slurm-xx.out file"
#
# quiet_output
#  Values: yes | no
# "Disable verbose on Make command execution"
#
# use_cuda
#  Values: yes | no
# "if cuda is disabled BFS runs are proccessed
#  by CPU"
#
# code_optimization_level
#  Values: -O3 | -O2 | -O1 | -O0
#  "Compiler optimization level."
#
#
# code_optimization_flags
#  Format: value, value, value
#  Values: -funroll-loops, -finline-functions, -funswitch-loops, -fpredictive-commoning,
#          -fgcse-after-reload, -ftree-vectorize, -ftree-partial-pre and -fipa-cp-clone options, ...
#           (https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options)
#  "Optimization flags added to the compiler"
#
# code_optimization_use_m64
#  Values: yes | no
#  "whether or not swith to m64 arch."
#  (https://software.intel.com/en-us/blogs/2012/09/26/gcc-x86-performance-hints)


nvidia_architecture                       :="all"
nvidia_ptxas_otimize                      :="no"
manual_profiler_cuda                      :="no"
manual_profiler_other_compilers           :="yes"
openmp_on_cuda                            :="no"
openmp_on_other_compilers                 :="no"
custom_openmpi                            :="yes"
custom_openmpi_basedir                    :=/home/jromera/openmpi
scorep_profiler_enable                    :="no"
scorep_profiler_automatic_instrumentation :="yes"
scorep_custom                             :="yes"
scorep_custom_basedir                     :=/home/jromera/scorep
use_avx_instructions                      :="no"
enable_simd_compression                   :="yes"
debug                                     :="no"
quiet_output                              :="no"
use_cuda                                  :="yes"
code_optimization_level                   :=-O3
code_optimization_flags                   :=
code_optimization_use_m64                 :="no"



CXX := $(shell locate bin/g++- | grep "bin/g++-[0-9]" | tail -1)
CC := $(shell locate bin/gcc- | grep "bin/gcc-[0-9]" | tail -1)
NVCXX := $(shell locate bin/nvcc | grep bin/nvcc$$ | tail -1)
NVDIR := $(shell echo $(NVCXX) | sed 's,/bin/nvcc$$,,')


ifeq ($(code_optimization_use_m64), "yes")
	m_arch := -m64
else
	m_arch := -m32 --with-mfpmath=sse
endif

ifeq ($(use_avx_instructions), "yes")
	arch := -mavx
else
ifeq ($(enable_simd_compression), "yes")
	arch := -msse3
else
	arch := -march=native
endif
endif

ifeq ($(nvidia_ptxas_otimize), "yes")
	PTXAS := --ptxas-options="-O3"
endif

ifeq ($(nvidia_architecture), "all")
	NV_ARCHITECTURE := $(PTXAS) -gencode=arch=compute_20,code=\"sm_20,compute_20\" -gencode=arch=compute_30,code=\"sm_30,compute_30\" -gencode=arch=compute_35,code=\"sm_35,compute_35\"
else
ifeq ($(nvidia_architecture), "fermi")
	NV_ARCHITECTURE := $(PTXAS) -fmad=true -arch=sm_20 -ftz=true -prec-div=false -prec-sqrt=false
else
ifeq ($(nvidia_architecture), "kepler")
	NV_ARCHITECTURE := $(PTXAS) -arch=sm_35
else
	NV_ARCHITECTURE := $(PTXAS) -arch=sm_52
endif
endif
endif

ifeq ($(scorep_profiler_enable), "yes")
	threads := none
	ifeq ($(openmp_on_cuda), "yes")
		threads := omp
	endif
	ifeq ($(openmp_on_other_compilers), "yes")
		threads := omp
	endif
	scorep_instrumentation_flag :=--cuda --mpp=mpi --thread=$(threads) --nopdt
ifeq ($(scorep_custom), "yes")
ifeq ($(scorep_profiler_automatic_instrumentation), "no")
	# https://silc.zih.tu-dresden.de/scorep-current/html/instrumentation.html#manual_instrumentation
	scorep_instrumentation_flag :=--user --cuda --mpp=mpi --thread=$(threads) --nopdt --online-access --instrument-filter="filter.scorep"
	SCOREP_INSTRUMENTATION := -D_SCOREP_USER_INSTRUMENTATION -DSCOREP_USER_ENABLE
	SCOREP_CPPFLAGS := `scorep-config --cppflags`
	SCOREP_LLIBS := `scorep-config --libs`
	SCOREP_LFLAGS := `scorep-config --ldflags`
endif
	export LD_LIBRARY_PATH := $(scorep_custom_basedir)/lib::$(LD_LIBRARY_PATH)
	libcudart_static_path := -L"`locate libcudart_static.a | tail -1 | sed -e 's,/libcudart_static.a,,'`"
	libcudart_static_flag = -lcudart_static
	PROFILER := scorep $(scorep_instrumentation_flag)
else
ifeq ($(scorep_profiler_automatic_instrumentation), "no")
	scorep_instrumentation_flag :=--pomp --cuda --mpp=mpi --thread=$(threads) --nopdt --nocompiler
endif
	PROFILER := scorep $(scorep_instrumentation_flag)
endif
else
	libcudart_static_path := -L$(NVDIR)/lib64
	libcudart_static_flag = -lcudart
endif

ifeq ($(openmp_on_cuda), "yes")
	CUDA_OPENMP := -fopenmp
endif

ifeq ($(openmp_on_other_compilers), "yes")
	OPENMP := -fopenmp
endif

ifeq ($(manual_profiler_cuda), "yes")
	CUDA_INSTRUM := -DINSTRUMENTED
endif

ifeq ($(manual_profiler_other_compilers), "yes")
	INSTRUMENTED := -DINSTRUMENTED
endif

ifeq ($(debug), "yes")
	DEFINES += -D_DEBUG
endif

ifeq ($(enable_simd_compression), "yes")
	DEFINES += -D_SIMDCOMPRESS
	INCPATH := -I. -Icompression/include
	HEADERS := $(shell ls compression/include/*h)
else
	INCPATH := -I.
	HEADERS :=
endif

ifeq ($(use_cuda), "yes")
	DEFINE_CUDA := -D_CUDA
	bfs_object := cuda_bfs_cuda.o
else
	bfs_object :=  cpubfs_bin.o
	bfs_implementation := cpubfs_bin.cpp
endif

ifeq ($(custom_openmpi), "yes")
	export OMPI_CC := $(CC)
	export OMPI_CXX := $(CXX)
	MPICC := $(custom_openmpi_basedir)/bin/mpicc
	MPICXX := $(custom_openmpi_basedir)/bin/mpicxx
else
	MPICC := mpicc
	MPICXX := mpicxx
endif

ifeq ($(quiet_output), "yes")
	Q = @
endif

CXXFLAGS := $(arch) -std=c++11  -Weffc++ -pedantic $(code_optimization_level) $(code_optimization_flags) -Wall -Wextra
CCFLAGS := $(arch) -std=c99 -pedantic -m32 -mfpmath=sse $(code_optimization_level) $(code_optimization_flags) -Wall -Wextra
MPICFLAGS := $(arch) -std=c99 -pedantic $(code_optimization_flags) $(m_arch) -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) -Wall -Wextra
MPICXXFLAGS := $(arch) -std=c++11 -pedantic $(code_optimization_level) $(code_optimization_flags) $(m_arch) -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) $(INSTRUMENTED) -Wall -Wextra
NVCXXFLAGS := $(arch),$(m_arch),$(code_optimization_level),-pipe,$(DEFINE_CUDA),$(CUDA_INSTRUM),$(CUDA_OPENMP)
LFLAGS := $(m_arch) $(SCOREP_LFLAGS) $(OPENMP) -Wl,$(code_optimization_level)
LLIBS := $(SCOREP_LLIBS) $(libcudart_static_path) -L$(NVDIR)/lib $(libcudart_static_flag) -lcuda

NVDIR := $(NVDIR)
CXX := $(CXX)
CC := $(CC)
MPICC := $(MPICC)
MPICXX := $(MPICXX)
LINK := $(PROFILER) $(MPICXX)

OUTFILES := $(shell ls *.o)
COMPRESSION_OBJECTS := bitpacking.o integratedbitpacking.o simdbitpacking.o usimdbitpacking.o simdintegratedbitpacking.o intersection.o varintdecode.o streamvbyte.o simdpackedsearch.o simdpackedselect.o frameofreference.o for.o
SOURCES := main.cpp generator/utils.c generator/splittable_mrg.c generator/make_graph.c generator/graph_generator.c $(bfs_implementation) validate/onesided.c validate/onesided_emul.c bitlevelfunctions.cpp
OBJECTS := $(bfs_object) main.o utils.o splittable_mrg.o make_graph.o graph_generator.o onesided.o onesided_emul.o bitlevelfunctions.o

ifeq ($(enable_simd_compression), "yes")
	OBJECTS := $(COMPRESSION_OBJECTS) $(OBJECTS)
endif

all: clean g500

main.o: main.cpp validate/validate.h distmatrix2d.hh generator/graph_generator.h generator/user_settings.h validate/mpi_workarounds.h generator/utils.h \
		generator/splittable_mrg.h validate/onesided.h generator/make_graph.h cuda/cuda_bfs.h cuda/cuda_support.hh \
		../b40c/util/basic_utils.cuh ../b40c/graph/bfs/csr_problem_2d.cuh ../b40c/util/cuda_properties.cuh ../b40c/util/memset_kernel.cuh ../b40c/util/cta_work_progress.cuh ../b40c/util/error_utils.cuh \
		../b40c/util/device_intrinsics.cuh ../b40c/util/reduction/warp_reduce.cuh ../b40c/util/operators.cuh ../b40c/util/io/modified_load.cuh ../b40c/util/vector_types.cuh ../b40c/util/io/modified_store.cuh \
		../b40c/util/multiple_buffering.cuh ../b40c/graph/bfs/problem_type.cuh ../b40c/partition/problem_type.cuh ../b40c/radix_sort/sort_utils.cuh \
		../b40c/graph/bfs/enactor_multi_gpu_2d.cuh ../b40c/util/spine.cuh ../b40c/util/kernel_runtime_stats.cuh ../b40c/graph/bfs/enactor_base.cuh \
		../b40c/graph/bfs/two_phase/contract_atomic/kernel.cuh ../b40c/util/cta_work_distribution.cuh ../b40c/graph/bfs/two_phase/contract_atomic/cta.cuh ../b40c/util/scan/cooperative_scan.cuh \
		../b40c/util/srts_grid.cuh ../b40c/util/numeric_traits.cuh ../b40c/util/reduction/cooperative_reduction.cuh ../b40c/util/reduction/serial_reduce.cuh \
		../b40c/util/scan/serial_scan.cuh ../b40c/util/scan/warp_scan.cuh ../b40c/util/io/initialize_tile.cuh ../b40c/util/io/load_tile.cuh \
		../b40c/util/io/store_tile.cuh ../b40c/util/io/scatter_tile.cuh ../b40c/util/reduction/tree_reduce.cuh ../b40c/graph/bfs/two_phase/contract_atomic/kernel_policy.cuh \
		../b40c/util/srts_details.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel.cuh ../b40c/graph/bfs/two_phase/expand_atomic/cta.cuh ../b40c/util/soa_tuple.cuh \
		../b40c/util/scan/soa/cooperative_soa_scan.cuh ../b40c/util/reduction/soa/cooperative_soa_reduction.cuh ../b40c/util/reduction/soa/serial_soa_reduce.cuh ../b40c/util/reduction/soa/warp_soa_reduce.cuh \
		../b40c/util/scan/soa/warp_soa_scan.cuh ../b40c/util/scan/soa/serial_soa_scan.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel_policy.cuh ../b40c/util/srts_soa_details.cuh \
		../b40c/graph/bfs/partition_contract/policy.cuh ../b40c/partition/policy.cuh ../b40c/partition/spine/kernel.cuh ../b40c/scan/spine/kernel.cuh \
		../b40c/scan/downsweep/cta.cuh ../b40c/scan/problem_type.cuh ../b40c/reduction/problem_type.cuh ../b40c/scan/kernel_policy.cuh \
		../b40c/partition/upsweep/tuning_policy.cuh ../b40c/partition/downsweep/tuning_policy.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel.cuh ../b40c/graph/bfs/partition_contract/upsweep/cta.cuh \
		../b40c/partition/upsweep/cta.cuh ../b40c/partition/upsweep/aggregate_counters.cuh ../b40c/partition/upsweep/composite_counters.cuh ../b40c/partition/upsweep/tile.cuh \
		../b40c/graph/bfs/partition_contract/upsweep/tile.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel_policy.cuh ../b40c/partition/upsweep/kernel_policy.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel.cuh \
		../b40c/graph/bfs/partition_contract/downsweep/cta.cuh ../b40c/partition/downsweep/cta.cuh ../b40c/graph/bfs/partition_contract/downsweep/tile.cuh \
		../b40c/partition/downsweep/tile.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel_policy.cuh ../b40c/partition/downsweep/kernel_policy.cuh \
		../b40c/graph/bfs/copy/kernel.cuh ../b40c/graph/bfs/copy/cta.cuh ../b40c/graph/bfs/copy/kernel_policy.cuh globalbfs.hh bitlevelfunctions.h cpubfs_bin.h
	@echo ""
	@echo "--- Compiling g500"
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(SCOREP_INSTRUMENTATION) $(SCOREP_CPPFLAGS) $(INCPATH) -o main.o main.cpp
	@echo "    MPICC     $@"

bitpacking.o: compression/include/bitpacking.h compression/src/bitpacking.cpp
ifeq ($(enable_simd_compression), "yes")
	@echo ""
	@echo "============================================================================"
	@echo "== Compiling"
	@echo "============================================================================"
endif
	@echo ""
	@echo "--- Compiling SIMDCompression"
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/bitpacking.cpp -Icompression/include
	@echo "    CCX       $@"

intersection.o: compression/include/intersection.h compression/src/intersection.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/intersection.cpp -Icompression/include
	@echo "    CCX       $@"

benchintersection: intersection.o compression/src/benchintersection.cpp compression/include/synthetic.h compression/include/timer.h
	$(Q)$(CXX) $(CXXFLAGS) -o benchintersection compression/src/benchintersection.cpp intersection.o -Icompression/include
	@echo "    CCX       $@"

likwidintersection: intersection.o compression/src/benchintersection.cpp compression/include/synthetic.h compression/include/timer.h
	$(Q)$(CXX) $(CXXFLAGS) -DLIKWID_MARKERS -pthread -o likwidintersection compression/src/benchintersection.cpp intersection.o -Icompression/include -llikwid
	@echo "    CCX       $@"

integratedbitpacking.o: compression/include/integratedbitpacking.h compression/src/integratedbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/integratedbitpacking.cpp -Icompression/include
	@echo "    CCX       $@"

simdpackedsearch.o:  compression/src/simdpackedsearch.c
	$(Q)$(CC) $(CCFLAGS) -c compression/src/simdpackedsearch.c
	@echo "    CC        $@"

simdpackedselect.o:  compression/src/simdpackedselect.c
	$(Q)$(CC) $(CCFLAGS) -c compression/src/simdpackedselect.c
	@echo "    CC        $@"

streamvbyte.o:  compression/src/streamvbyte.c
	$(Q)$(CC) $(CCFLAGS) -c compression/src/streamvbyte.c
	@echo "    CC        $@"

varintdecode.o:  compression/src/varintdecode.c
	$(Q)$(CC) $(CCFLAGS) -c compression/src/varintdecode.c
	@echo "    CC        $@"

simdbitpacking.o: compression/include/simdbitpacking.h compression/src/simdbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/simdbitpacking.cpp -Icompression/include
	@echo "    CCX       $@"

usimdbitpacking.o: compression/include/usimdbitpacking.h compression/src/usimdbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/usimdbitpacking.cpp -Icompression/include
	@echo "    CCX       $@"

frameofreference.o: compression/src/frameofreference.cpp $(HEADERS)
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/frameofreference.cpp -Icompression/include
	@echo "    CCX       $@"

for.o: compression/src/for.c $(HEADERS)
	$(Q)$(CC) $(CCFLAGS) -c compression/src/for.c -Icompression/include
	@echo "    CC        $@"

simdintegratedbitpacking.o: compression/include/simdintegratedbitpacking.h compression/include/delta.h compression/src/simdintegratedbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/src/simdintegratedbitpacking.cpp -Icompression/include
	@echo "    CCX       $@"

utils.o: generator/utils.c generator/splittable_mrg.h generator/graph_generator.h generator/user_settings.h generator/utils.h
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ generator/utils.c
	@echo "    MPICC     $@"

splittable_mrg.o: generator/splittable_mrg.c generator/mod_arith.h generator/user_settings.h generator/mod_arith_64bit.h generator/mod_arith_32bit.h \
		generator/splittable_mrg.h generator/mrg_transitions.c
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ generator/splittable_mrg.c
	@echo "    MPICC     $@"

make_graph.o: generator/make_graph.c generator/graph_generator.h generator/user_settings.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ generator/make_graph.c
	@echo "    MPICC     $@"

graph_generator.o: generator/graph_generator.c generator/user_settings.h generator/splittable_mrg.h generator/graph_generator.h
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ generator/graph_generator.c
	@echo "    MPICC     $@"

simplecpubfs.o: simplecpubfs.cpp simplecpubfs.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(INCPATH) -o $@ simplecpubfs.cpp
	@echo "    MPICXX    $@"

onesided.o: validate/onesided.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ validate/onesided.c
	@echo "    MPICC     $@"

onesided_emul.o: validate/onesided_emul.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) $(INCPATH) -o $@ validate/onesided_emul.c
	@echo "    MPICC     $@"

bitlevelfunctions.o: bitlevelfunctions.h bitlevelfunctions.cpp
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(INCPATH) -o $@ bitlevelfunctions.cpp
	@echo "    MPICXX    $@"

cpubfs_bin.o: cpubfs_bin.cpp cpubfs_bin.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(INCPATH) -o $@ cpubfs_bin.cpp
	@echo "    MPICXX    $@"

cuda_bfs_cuda.o: cuda/cuda_bfs.cu
	@echo ""
ifneq ($(enable_simd_compression), "yes")
	@echo "============================================================================"
	@echo "== Compiling"
	@echo "============================================================================"
endif
	@echo ""
	@echo "--- Compiling CUDA/BFS"
	$(Q)$(NVCXX) $(NV_ARCHITECTURE) -c -ccbin $(CXX) -Xcompiler $(NVCXXFLAGS),"`$(MPICXX) -compile_info --showme:compile | sed -e 's,-compile_info,,' -e 's,--showme:compile,,' -e 's,g++,,' -e 's,icpc,,' -e 's,-pthread,,'`" -std=c++11 --compiler-options -fno-strict-aliasing -use_fast_math -m64 $(code_optimization_level) -I$(NVDIR)/include -I.. cuda/cuda_bfs.cu -o cuda_bfs_cuda.o
	@echo "    NVCC      $@"
	@echo ""

g500:  $(OBJECTS)
	@echo ""
	@echo "============================================================================"
	@echo "== Linking"
	@echo "============================================================================"
	@echo ""
	@echo "--- Linking"
	$(Q)$(LINK) $(LFLAGS) -o $@ $(OBJECTS) $(OBJCOMP) $(LLIBS)
	@echo "    MPICXX    $@"

clean:
	@echo ""
	@echo "============================================================================"
	@echo "== Cleaning"
	@echo "============================================================================"
	@echo ""
	$(Q)rm -rf $(OUTFILES) $(OBJECTS)
	$(Q)rm -rf *~ core *.core example g500
	@echo "--- Cleaning"

example:  $(HEADERS) compression/example.cpp  $(COMPRESSION_OBJECTS)
	$(Q)$(CXX) $(CXXFLAGS)  -o example compression/example.cpp  $(COMPRESSION_OBJECTS) -Icompression/include
	@echo "    CCX       $@"

.PHONY: g500 clean
