.SUFFIXES:
#
.SUFFIXES: .cpp .o .c .h
# replace the CXX variable with a path to a C++11 compatible compiler.


CXX := $(shell locate bin/g++- | grep "bin/g++-[0-9]" | tail -1)
CC := $(shell locate bin/gcc- | grep "bin/gcc-[0-9]" | tail -1)


ifeq ($(INTEL), 1)
# if you wish to use the Intel compiler, please do "make INTEL=1".
    CXX ?= icpc
    CC ?= icpc
ifeq ($(DEBUG),1)
    CXXFLAGS = -std=c++11 -O3 -Wall -ansi -xAVX -DDEBUG=1 -D_GLIBCXX_DEBUG   -ggdb
    CCFLAGS = -std=c99 -O3 -Wall -ansi -xAVX -DDEBUG=1 -D_GLIBCXX_DEBUG   -ggdb
else
    CXXFLAGS = -std=c++11 -O2 -Wall -ansi -xAVX -DNDEBUG=1  -ggdb
    CCFLAGS = -std=c99 -O2 -Wall -ansi -xAVX -DNDEBUG=1  -ggdb
endif # debug
else #intel
    CXX ?= g++-8
ifeq ($(DEBUG),1)
    CXXFLAGS = -mavx -std=c++11  -Weffc++ -pedantic -ggdb -DDEBUG=1 -D_GLIBCXX_DEBUG -Wall -Wextra
    CCFLAGS =-mavx -std=c99  -pedantic -ggdb -DDEBUG=1 -D_GLIBCXX_DEBUG -Wall -Wextra
else
    CXXFLAGS = -mavx -std=c++11  -Weffc++ -pedantic -O3 -Wall -Wextra
    CCFLAGS =-mavx -std=c99 -pedantic -O3 -Wall -Wextra
endif #debug
endif #intel




HEADERS= $(shell ls compression/include/*h)

all: unit  testcodecs  testintegration  benchintersection benchsearch libSIMDCompressionAndIntersection.a
	echo "please run unit tests by running the unit executable"

bitpacking.o: compression/include/bitpacking.h compression/src/bitpacking.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/bitpacking.cpp -Icompression/include

intersection.o: compression/include/intersection.h compression/src/intersection.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/intersection.cpp -Icompression/include

benchintersection: intersection.o compression/src/benchintersection.cpp compression/include/synthetic.h compression/include/timer.h
	$(CXX) $(CXXFLAGS) -o benchintersection compression/src/benchintersection.cpp intersection.o -Icompression/include

likwidintersection: intersection.o compression/src/benchintersection.cpp compression/include/synthetic.h compression/include/timer.h
	$(CXX) $(CXXFLAGS) -DLIKWID_MARKERS -pthread -o likwidintersection compression/src/benchintersection.cpp intersection.o -Icompression/include -llikwid

integratedbitpacking.o: compression/include/integratedbitpacking.h compression/src/integratedbitpacking.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/integratedbitpacking.cpp -Icompression/include

simdpackedsearch.o:  compression/src/simdpackedsearch.c
	$(CC) $(CCFLAGS) -c compression/src/simdpackedsearch.c

simdpackedselect.o:  compression/src/simdpackedselect.c
	$(CC) $(CCFLAGS) -c compression/src/simdpackedselect.c

streamvbyte.o:  compression/src/streamvbyte.c
	$(CC) $(CCFLAGS) -c compression/src/streamvbyte.c

varintdecode.o:  compression/src/varintdecode.c
	$(CC) $(CCFLAGS) -c compression/src/varintdecode.c

simdbitpacking.o: compression/include/simdbitpacking.h compression/src/simdbitpacking.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/simdbitpacking.cpp -Icompression/include

usimdbitpacking.o: compression/include/usimdbitpacking.h compression/src/usimdbitpacking.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/usimdbitpacking.cpp -Icompression/include

frameofreference.o: compression/src/frameofreference.cpp $(HEADERS)
	$(CXX) $(CXXFLAGS) -c compression/src/frameofreference.cpp -Icompression/include

for.o: compression/src/for.c $(HEADERS)
	$(CC) $(CCFLAGS) -c compression/src/for.c -Icompression/include

simdintegratedbitpacking.o: compression/include/simdintegratedbitpacking.h compression/include/delta.h compression/src/simdintegratedbitpacking.cpp
	$(CXX) $(CXXFLAGS) -c compression/src/simdintegratedbitpacking.cpp -Icompression/include



UNAME := $(shell uname)


OBJECTS= bitpacking.o integratedbitpacking.o simdbitpacking.o usimdbitpacking.o    simdintegratedbitpacking.o   intersection.o  varintdecode.o streamvbyte.o simdpackedsearch.o simdpackedselect.o frameofreference.o for.o

benchsearch: $(HEADERS) compression/src/benchsearch.cpp  $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o benchsearch compression/src/benchsearch.cpp  $(OBJECTS) -Icompression/include

unit: $(HEADERS)   compression/src/unit.cpp $(OBJECTS)
	$(CXX) $(CXXFLAGS) -o unit compression/src/unit.cpp  $(OBJECTS) -Icompression/include

testcodecs: $(HEADERS) compression/src/testcodecs.cpp   $(OBJECTS)
	$(CXX) $(CXXFLAGS) -Icompression/include -o testcodecs compression/src/testcodecs.cpp   $(OBJECTS)

example:  $(HEADERS) compression/example.cpp  $(OBJECTS)
	$(CXX) $(CXXFLAGS)  -o example compression/example.cpp  $(OBJECTS) -Icompression/include

testintegration:  bitpacking.o simdbitpacking.o usimdbitpacking.o integratedbitpacking.o     simdintegratedbitpacking.o compression/src/testintegration.cpp  $(HEADERS) 
	$(CXX) $(CXXFLAGS) -Icompression/include -o testintegration compression/src/testintegration.cpp   bitpacking.o integratedbitpacking.o  simdbitpacking.o usimdbitpacking.o     simdintegratedbitpacking.o 

libSIMDCompressionAndIntersection.a: $(OBJECTS)
	ar rvs $@ $^

clean:
	rm -f *.o unit testintegration testcodecs   simplesynth  compress uncompress budgetedtest   entropy example benchintersection

.PHONY: all clean
