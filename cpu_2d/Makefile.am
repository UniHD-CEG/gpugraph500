
### Local configuration changes
#

AUTOMAKE_OPTIONS=foreign subdir-objects
ACLOCAL_AMFLAGS=-I m4

DEFINES=

### Dynamic variables
#

if PTXAS_OTIMIZATION
  PTXAS=--ptxas-options="-O3"
endif

if NVIDIA_ARCHITECTURE_FERMI
  NV_ARCHITECTURE=$(PTXAS) -fmad=true -arch=sm_20 -ftz=true -prec-div=false -prec-sqrt=false
else
if NVIDIA_ARCHITECTURE_KEPLER
  NV_ARCHITECTURE=$(PTXAS) -arch=sm_35
else
  NV_ARCHITECTURE=$(PTXAS) -gencode=arch=compute_20,code=\"sm_20,compute_20\" -gencode=arch=compute_30,code=\"sm_30,compute_30\" -gencode=arch=compute_35,code=\"sm_35,compute_35\"
endif
endif


### Instrumentation. Score-P
#

if SCOREP
if OPENMP_ON_CUDA
  THREADS=omp
else
if OPENMP_ON_OTHERS
  THREADS=omp
else
  THREADS=none
endif
endif
  scorep_instrumentation_flag=--user --cuda --mpp=mpi --thread=$(THREADS) --nopdt --online-access --instrument-filter=\"filter.scorep\"
  SCOREP_INSTRUMENTATION=-D_SCOREP_USER_INSTRUMENTATION -DSCOREP_USER_ENABLE
  LDFLAGS_SCOREP=@SCOREP_LFLAG@
  LLIBS_SCOREP=@SCOREP_LLIBS@
  SCOREP_CXXCPPFLAGS=@SCOREP_CPPFLAG@
else
  libcudart_static_path=@CUDA_LDFLAGS@
  libcudart_static_flag=@CUDA_LIBS@
endif

if OPENMP_ON_CUDA
  CUDA_OPENMP=-fopenmp
endif

if OPENMP_ON_OTHERS
  OPENMP=-fopenmp
endif

if BASIC_PROFING_BFS
  # FIXME:not working. use -D_INSTRUMENT_BFS instead
  CUDA_INSTRUM=-DINSTRUMENTED
endif

if BASIC_PROFING_OTHER
  INSTRUMENTED=-DINSTRUMENTED
endif

if DEBUG
  DEFINES +=-D_DEBUG
endif

### Compression
#
if COMPRESSION
if !SIMD
if !SIMT
 @echo "Compression is enabled, but not specified."
 @exit
endif
endif
  DEFINES +=-D_COMPRESSION
if DEBUG_COMPRESSION
  DEFINES +=-D_COMPRESSIONDEBUG
  LLIBC=-static-libstdc++
endif
if VERIFY_COMPRESSION
  DEFINES +=-D_COMPRESSIONVERIFY
endif

if SIMD
  DEFINES +=-D_SIMD
  INCPATH=-I. -Icompression/cpusimd/include
  g500_HEADER_LIST=@simd_H_FILES@
else
  INCPATH=-I.
  g500_HEADER_LIST=
endif

# Other. e.g SIMT
endif

if CUDA
  DEFINE_CUDA=-D_CUDA
  bfs_object=cuda_bfs_cuda.o
else
  bfs_object=cpubfs_bin.o
  bfs_implementation=cpubfs_bin.cpp
endif

if QUIET_OUTPUT
  Q=@
endif

if DEBUGGING
  DEBUG_FLAG=-g
  NVCC_DEBUG_FLAGS=-DTHRUST_DEBUG
endif



### Flags
#

MPICFLAGS=@CC_MFLAG@ @C99@ @CC_MBITS@ -mfpmath=sse -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) $(DEBUG_FLAG) @MPI_CFLAGS@ @CFLAGS@ @WARN_MPICC@
MPICXXFLAGS=@CXX_MFLAG@ @C11@ @CXX_MBITS@ -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) $(INSTRUMENTED) $(DEBUG_FLAG) @MPI_CXXFLAGS@ @CXXFLAGS@ @WARN_MPICXX@
NVCXXFLAGS=,@CXX_MBITS@,@CXX_OO@,-pipe,$(DEFINE_CUDA),$(CUDA_INSTRUM),$(CUDA_OPENMP),$(DEBUG_FLAG)
AM_LDLIBS=$(LLIBS_SCOREP) $(libcudart_static_path) -L@CUDA_LIBDIR@ @MPI_CXXLDFLAGS@ $(libcudart_static_flag) -lcuda $(LLIBC)

AM_LDFLAGS=@CXX_MFLAG@ $(LDFLAGS_SCOREP) $(OPENMP) -Wl,@CXX_OO@
AM_CXXFLAGS=@CXX_MFLAG@ @CXXFLAGS@ $(DEBUG_FLAG) @WARN_CXXFLAGS@
AM_CFLAGS=@CC_MFLAG@ @CFLAGS@ $(DEBUG_FLAG) @WARN_CFLAGS@

### Compilers
#

NVCXX=@NVCC@
AM_LD=$(PROFILER) @MPICXX@


### List of sources to compile
#

if SIMD
  COMPRESSION_OBJECTS=@SIMD_OBJECTS@
else
  COMPRESSION_OBJECTS="ADD_MORE_TYPES_HERE"
endif

if COMPRESSION
  g500_OBJECT_LIST=$(COMPRESSION_OBJECTS) $(bfs_object) @g500_OBJECTS@
else
  g500_OBJECT_LIST=$(bfs_object) @g500_OBJECTS@
endif



### Make/ Build rules
#

# Clean all files that were generated by bootstrap.sh or autoscan
maintainer-clean-local:
	@echo "--- Cleaning" ; \
	$(Q)rm -f  aclocal.m4 ; \
	$(Q)rm -f  autoscan.log ; \
	$(Q)rm -fr build/aux/ ; \
	$(Q)rm -fr build/m4/ ; \
	$(Q)rm -f  configure ;

all: clean-local g500

main.o: main.cpp validate/validate.h distmatrix2d.hh generator/graph_generator.h generator/user_settings.h validate/mpi_workarounds.h generator/utils.h \
		generator/splittable_mrg.h validate/onesided.h generator/make_graph.h cuda/cuda_bfs.h cuda/cuda_support.hh \
		../b40c/util/basic_utils.cuh ../b40c/graph/bfs/csr_problem_2d.cuh ../b40c/util/cuda_properties.cuh ../b40c/util/memset_kernel.cuh ../b40c/util/cta_work_progress.cuh ../b40c/util/error_utils.cuh \
		../b40c/util/device_intrinsics.cuh ../b40c/util/reduction/warp_reduce.cuh ../b40c/util/operators.cuh ../b40c/util/io/modified_load.cuh ../b40c/util/vector_types.cuh ../b40c/util/io/modified_store.cuh \
		../b40c/util/multiple_buffering.cuh ../b40c/graph/bfs/problem_type.cuh ../b40c/partition/problem_type.cuh ../b40c/radix_sort/sort_utils.cuh \
		../b40c/graph/bfs/enactor_multi_gpu_2d.cuh ../b40c/util/spine.cuh ../b40c/util/kernel_runtime_stats.cuh ../b40c/graph/bfs/enactor_base.cuh \
		../b40c/graph/bfs/two_phase/contract_atomic/kernel.cuh ../b40c/util/cta_work_distribution.cuh ../b40c/graph/bfs/two_phase/contract_atomic/cta.cuh ../b40c/util/scan/cooperative_scan.cuh \
		../b40c/util/srts_grid.cuh ../b40c/util/numeric_traits.cuh ../b40c/util/reduction/cooperative_reduction.cuh ../b40c/util/reduction/serial_reduce.cuh \
		../b40c/util/scan/serial_scan.cuh ../b40c/util/scan/warp_scan.cuh ../b40c/util/io/initialize_tile.cuh ../b40c/util/io/load_tile.cuh \
		../b40c/util/io/store_tile.cuh ../b40c/util/io/scatter_tile.cuh ../b40c/util/reduction/tree_reduce.cuh ../b40c/graph/bfs/two_phase/contract_atomic/kernel_policy.cuh \
		../b40c/util/srts_details.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel.cuh ../b40c/graph/bfs/two_phase/expand_atomic/cta.cuh ../b40c/util/soa_tuple.cuh \
		../b40c/util/scan/soa/cooperative_soa_scan.cuh ../b40c/util/reduction/soa/cooperative_soa_reduction.cuh ../b40c/util/reduction/soa/serial_soa_reduce.cuh ../b40c/util/reduction/soa/warp_soa_reduce.cuh \
		../b40c/util/scan/soa/warp_soa_scan.cuh ../b40c/util/scan/soa/serial_soa_scan.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel_policy.cuh ../b40c/util/srts_soa_details.cuh \
		../b40c/graph/bfs/partition_contract/policy.cuh ../b40c/partition/policy.cuh ../b40c/partition/spine/kernel.cuh ../b40c/scan/spine/kernel.cuh \
		../b40c/scan/downsweep/cta.cuh ../b40c/scan/problem_type.cuh ../b40c/reduction/problem_type.cuh ../b40c/scan/kernel_policy.cuh \
		../b40c/partition/upsweep/tuning_policy.cuh ../b40c/partition/downsweep/tuning_policy.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel.cuh ../b40c/graph/bfs/partition_contract/upsweep/cta.cuh \
		../b40c/partition/upsweep/cta.cuh ../b40c/partition/upsweep/aggregate_counters.cuh ../b40c/partition/upsweep/composite_counters.cuh ../b40c/partition/upsweep/tile.cuh \
		../b40c/graph/bfs/partition_contract/upsweep/tile.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel_policy.cuh ../b40c/partition/upsweep/kernel_policy.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel.cuh \
		../b40c/graph/bfs/partition_contract/downsweep/cta.cuh ../b40c/partition/downsweep/cta.cuh ../b40c/graph/bfs/partition_contract/downsweep/tile.cuh \
		../b40c/partition/downsweep/tile.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel_policy.cuh ../b40c/partition/downsweep/kernel_policy.cuh \
		../b40c/graph/bfs/copy/kernel.cuh ../b40c/graph/bfs/copy/cta.cuh ../b40c/graph/bfs/copy/kernel_policy.cuh globalbfs.hh bitlevelfunctions.h cpubfs_bin.h \
		compression/cpusimd.hh compression/nocompression.hh
	@echo ""
	@echo "--- Compiling g500"
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(SCOREP_INSTRUMENTATION) $(SCOREP_CXXCPPFLAGS) $(INCPATH) -o main.o main.cpp
	@echo "    MPICC     $@"

bitpacking.o: compression/cpusimd/include/bitpacking.h compression/cpusimd/src/bitpacking.cpp
if SIMD
	@echo ""
	@echo "============================================================================"
	@echo "== Compiling"
	@echo "============================================================================"
endif
	@echo ""
	@echo "--- Compiling CPU/SIMD compression"
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/bitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

integratedbitpacking.o: compression/cpusimd/include/integratedbitpacking.h compression/cpusimd/src/integratedbitpacking.cpp
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/integratedbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

simdpackedsearch.o:  compression/cpusimd/src/simdpackedsearch.c
	$(Q)$(CC) $(AM_CFLAGS) -c compression/cpusimd/src/simdpackedsearch.c
	@echo "    CC        $@"

simdpackedselect.o:  compression/cpusimd/src/simdpackedselect.c
	$(Q)$(CC) $(AM_CFLAGS) -c compression/cpusimd/src/simdpackedselect.c
	@echo "    CC        $@"

streamvbyte.o:  compression/cpusimd/src/streamvbyte.c
	$(Q)$(CC) $(AM_CFLAGS) -c compression/cpusimd/src/streamvbyte.c
	@echo "    CC        $@"

varintdecode.o:  compression/cpusimd/src/varintdecode.c
	$(Q)$(CC) $(AM_CFLAGS) -c compression/cpusimd/src/varintdecode.c
	@echo "    CC        $@"

simdbitpacking.o: compression/cpusimd/include/simdbitpacking.h compression/cpusimd/src/simdbitpacking.cpp
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/simdbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

usimdbitpacking.o: compression/cpusimd/include/usimdbitpacking.h compression/cpusimd/src/usimdbitpacking.cpp
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/usimdbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

frameofreference.o: compression/cpusimd/src/frameofreference.cpp $(g500_HEADER_LIST)
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/frameofreference.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

for.o: compression/cpusimd/src/for.c $(g500_HEADER_LIST)
	$(Q)$(CC) $(AM_CFLAGS) -c compression/cpusimd/src/for.c -Icompression/cpusimd/include
	@echo "    CC        $@"

simdintegratedbitpacking.o: compression/cpusimd/include/simdintegratedbitpacking.h compression/cpusimd/include/delta.h compression/cpusimd/src/simdintegratedbitpacking.cpp
	$(Q)$(CXX) $(AM_CXXFLAGS) -c compression/cpusimd/src/simdintegratedbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

utils.o: generator/utils.c generator/splittable_mrg.h generator/graph_generator.h generator/user_settings.h generator/utils.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/utils.c
	@echo "    MPICC     $@"

splittable_mrg.o: generator/splittable_mrg.c generator/mod_arith.h generator/user_settings.h generator/mod_arith_64bit.h generator/mod_arith_32bit.h \
		generator/splittable_mrg.h generator/mrg_transitions.c
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/splittable_mrg.c
	@echo "    MPICC     $@"

make_graph.o: generator/make_graph.c generator/graph_generator.h generator/user_settings.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/make_graph.c
	@echo "    MPICC     $@"

graph_generator.o: generator/graph_generator.c generator/user_settings.h generator/splittable_mrg.h generator/graph_generator.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/graph_generator.c
	@echo "    MPICC     $@"

simplecpubfs.o: simplecpubfs.cpp simplecpubfs.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ simplecpubfs.cpp
	@echo "    MPICXX    $@"

onesided.o: validate/onesided.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ validate/onesided.c
	@echo "    MPICC     $@"

onesided_emul.o: validate/onesided_emul.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ validate/onesided_emul.c
	@echo "    MPICC     $@"

bitlevelfunctions.o: bitlevelfunctions.h bitlevelfunctions.cpp
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ bitlevelfunctions.cpp
	@echo "    MPICXX    $@"

cpubfs_bin.o: cpubfs_bin.cpp cpubfs_bin.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ cpubfs_bin.cpp
	@echo "    MPICXX    $@"

cuda_bfs_cuda.o: cuda/cuda_bfs.cu
	@echo ""
if SIMD
	@echo "============================================================================"
	@echo "== Compiling"
	@echo "============================================================================"
endif
	@echo ""
	@echo "--- Compiling CUDA/BFS"
	$(Q)$(NVCXX) $(NV_ARCHITECTURE) $(NVCC_DEBUG_FLAGS) -c -ccbin @CXX@ -Xcompiler $(NVCXXFLAGS),"@MPI_CXXFLAGS@" --compiler-options -fno-strict-aliasing @CXX_OO@ -use_fast_math @CUDA_CFLAGS@ -I.. cuda/cuda_bfs.cu -o cuda_bfs_cuda.o
	@echo "    NVCC      $@"
	@echo ""

g500:  $(g500_OBJECT_LIST)
	@echo ""
	@echo "============================================================================"
	@echo "== Linking"
	@echo "============================================================================"
	@echo ""
	@echo "--- Linking"
	$(Q)$(AM_LD) $(AM_LDFLAGS) -o $@ $(g500_OBJECT_LIST) $(AM_LDLIBS)
	@echo "    MPICXX    $@"

clean-local:
	@echo ""
	@echo "============================================================================"
	@echo "== Cleaning"
	@echo "============================================================================"
	@echo ""
	@echo "--- Cleaning"
	$(Q)rm -rf *.o $(g500_OBJECT_LIST) 2> /dev/null
	$(Q)rm -rf *~ core *.core g500 2> /dev/null

.PHONY: g500 clean-local
