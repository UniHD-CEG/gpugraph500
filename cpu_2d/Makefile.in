# Makefile.in generated by automake 1.11.3 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

#########################################################
# Makefile - GCC
#########################################################
#
#
# Configurable options:
#
# nvidia_architecture
#   Values: fermi | kepler | maxwell | auto
#   Default value: auto
#   Description: "use all for generic code: Fermi and Kepler.
#
# nvidia_ptxas_otimize
#   Values: yes | no
#   Default value: no
#   Description: "enables -O3 optimization on ptax cuda regiters"
#
# openmp_on_cuda
#   Values: yes | no
#   Default value: no
#   Description: "Hybrid execution mode. OpenMP threads are added to
#  				  BFSruns processed with cuda"
#
# openmp_on_other_compilers
#   Values: yes | no
#   Default value: no
#   Description: "Hybrid execution mode. OpenMP threads are added to
#  				  other high O() code"
#
# manual_profiler_cuda
#   Values: yes | no
#   Default value: no
#   Description: "prints out information on initialization"
#
# manual_profiler_other_compilers
#   Values: yes | no
#   Default value: no
#   Description: "prints out results/ statistics at the end"
#
# custom_openmpi
#   Values: yes | no
#   Default value: no
#   Description: "use user compiled openmpi instead of system's"
#
# custom_openmpi_basedir
#   Values: path
#   Default value: CHANGE_ME
#   Description: "if previous option is set, absolute path to dir"
#
# scorep_profiler_enable
#   Values: yes | no
#   Default value: no
#   Description: "is scorep has been installed, enable it on code"
#
# scorep_profiler_manual_instrument
#   Values: yes | no
#   Default value: no
#   Description: "setting this option to yes, manual instrumentation is enabled.
#  				  Thus, the zones to be instrumented will be the currently
#  				  added zones using code wrappers (i.e: globalbfs.hh file)"
# 				  https://silc.zih.tu-dresden.de/scorep-current/html/instrumentation.html#manual_instrumentation
#
# scorep_custom
#   Values: yes | no
#   Default value: yes
#   Description: "use custom compiled scorep instead of systems one"
#
# scorep_custom_basedir
#   Values: path
#   Default value: CHANGE_ME
#   Description: "see custom_openmpi_basedir option above"
#
# use_avx_instructions
#   Values: yes | no
#   Default value: yes
#   Description: "CPU SSExx and AMD compatible AVX will be used.
#   				Required for SIMDcompression librasy"
#
# enable_compression
#   Values: yes | no
#   Default value: yes
#   Description: "Enables any type of compression through the network. Switch this option
#   				to "no" to disable completely compression. This option requires that
#   				either simd_compression_enabled (CPU) or simd_compression_enabled (GPU)
#   				are enabled.
#
# enable_compression_debug
#   Values: yes | no
#   Default value: no
#   Description: "shows statistics of compression rate, time of compression
#   			  decompression fot the compression schema used (cpusimd, gpusimt, etc),
#   			  and for each codec (in the case id at Lemire's simdcompress) if available."
#
# enable_compression_verify
#   Values: yes | no
#   Default value: no
#   Description: "sends both compressed, and decompressed data through
#   			  the network. Checks decompression at peer node. This option
#   			  impacts severely on performance since the original Frontier Queue
#   			  has to be transmitted along with the compressed one."
#
# simd_compression_enabled
#   Values: yes | no
#   Default value: yes
#   Description: "MPI packets will be sent compressed by using
#   			  D. Lemire SIMDCompression library"
#   External links:
#   			- https://github.com/lemire/SIMDCompressionAndIntersection
#
# debug
#   Values: yes | no
#   Default value:
#   Description: "Provides extra data in runtime execution.
#  				recorded in slurm-xx.out file"
#
# quiet_output
#   Values: yes | no
#   Default value: no
#   Description: "Disable verbose on Make command execution"
#
# use_cuda
#   Values: yes | no
#   Default value: yes
#   Description: "use CUDA implementation for the BFS algorithm instead of CPU"
#
# code_optimization_level
#   Values: O4 | O3 | O2 | O1 | O0
#   Default value:
#   Description: "Compiler optimization level. O0=none, O4=maximum"
#
# code_optimization_flags
#    Values: -funroll-loops -flto -finline-functions -funswitch-loops -fpredictive-commoning
#            -fgcse-after-reload -ftree-vectorize -ftree-partial-pre -fipa-cp-clone ...
#
#    Default value: -funroll-loops -flto (For GNU's version of Makefile)
#    Format: value value value (separated by spaces)
#    Description: "Optimization flags added to compiler"
#    External links:
#    			- GNU compiler: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options
#
# debug_code
#   Values: yes | no
#   Default value: no
#   Description: "Enables symbol inclusion in the binary (compiler option -g).
#   				Disables optimizations (compiler-O0) and removes code_optimization_flags.
#   				It is useful to run this option with Valgrind in the runtime Test-file
#   				for small SLURM grids scripts/debugger.sh (run from eval/) will wrap the
#   				executable in MPI and SLURM"
#

#CXX = `locate bin/g++- | grep "bin/g++-[0-9]" | tail -1`
#CC = $(shell locate bin/gcc- | grep "bin/gcc-[0-9]" | tail -1`
#NVCXX = `locate bin/nvcc | grep bin/nvcc$$ | tail -1`
#NVDIR = `echo $(NVCXX) | sed 's,/bin/nvcc$$,,'`
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = .
DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/configure AUTHORS COPYING ChangeLog INSTALL NEWS \
	config.guess config.sub install-sh ltmain.sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/m4/ax_check_cuda.m4 $(top_srcdir)/m4/ax_ext.m4 \
	$(top_srcdir)/m4/ax_gcc_x86_avx_xgetbv.m4 \
	$(top_srcdir)/m4/ax_gcc_x86_cpuid.m4 \
	$(top_srcdir)/m4/ax_require_defined.m4 \
	$(top_srcdir)/m4/lx_find_mpi.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  if test -d "$(distdir)"; then \
    find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
      && rm -rf "$(distdir)" \
      || { sleep 5 && rm -rf "$(distdir)"; }; \
  else :; fi
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \
  | sed 's|^\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'
distcleancheck_listfiles = find . -type f -print
ACLOCAL = @ACLOCAL@
ALLCFLAGS = @ALLCFLAGS@
ALLCXXFLAGS = @ALLCXXFLAGS@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = $(arch) -std=c99 -pedantic -m64 $(o_level) $(code_optimization_flags) $(DEBUG_FLAG) -Wall -Wextra
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CUDA_CFLAGS = @CUDA_CFLAGS@
CUDA_LDFLAGS = @CUDA_LDFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = $(arch) -std=c++11  -Weffc++ -pedantic -m64 $(o_level) $(code_optimization_flags) $(DEBUG_FLAG) -Wall -Wextra
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = -m64 $(SCOREP_LFLAGS) $(OPENMP) -Wl,$(o_level)
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
MPICC = @MPICC@
MPICXX = @MPICXX@
MPI_CFLAGS = @MPI_CFLAGS@
MPI_CLDFLAGS = @MPI_CLDFLAGS@
MPI_INC = @MPI_INC@
MPI_LIB = @MPI_LIB@
OBJEXT = @OBJEXT@
OPTIMIZATION_FLAGS = @OPTIMIZATION_FLAGS@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SIMD_FLAGS = @SIMD_FLAGS@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
ACLOCAL_AMFLAGS = -I m4

#
# Compiler/ Linker options: C, C++, MPI, CUDA Flags and Libs
#
#
#
MPICFLAGS = $(arch) -std=c99 -pedantic -m64 -mfpmath=sse $(code_optimization_flags) -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) $(DEBUG_FLAG) -Wall -Wextra
MPICXXFLAGS = $(arch) -std=c++11 -pedantic -m64 $(o_level) $(code_optimization_flags) -pipe $(DEFINE_CUDA) $(DEFINES) $(OPENMP) $(INSTRUMENTED) $(DEBUG_FLAG) -Wall -Wextra
NVCXXFLAGS = $(arch_nvcc),-m64,$(o_level_nvcc),-pipe,$(DEFINE_CUDA),$(CUDA_INSTRUM),$(CUDA_OPENMP),$(DEBUG_FLAG)
LLIBS = $(SCOREP_LLIBS) $(libcudart_static_path) -L$(NVDIR)/lib $(libcudart_static_flag) -lcuda $(LLIBC)

#NVDIR = $(NVDIR)
#CXX = $(CXX)
#CC = $(CC)
#MPICC = $(MPICC)
#MPICXX = $(MPICXX)
#LINK = $(PROFILER) $(MPICXX)
NVCXX = $(NVCC_PATH)
AM_CC = $(MPICC)
AM_CXX = $(MPICXX)
AM_F77 = $(MPIF77)
LINKER = $(PROFILER) $(MPICXX)

#
# List of sources to compile
#
#
#
OUTFILES = `ls *.o`
MAIN_OBJECTS = $(bfs_object) main.o utils.o splittable_mrg.o make_graph.o graph_generator.o onesided.o onesided_emul.o bitlevelfunctions.o
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
am--refresh: Makefile
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --gnu'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --gnu \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@if test ! -f $@; then rm -f stamp-h1; else :; fi
	@if test ! -f $@; then $(MAKE) $(AM_MAKEFLAGS) stamp-h1; else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzip: distdir
	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.lz*) \
	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(AM_DISTCHECK_CONFIGURE_FLAGS) \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@test -n '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: trying to run $@ with an empty' \
	       '$$(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	$(am__cd) '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	test `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile config.h
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-hdr

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: all install-am install-strip

.PHONY: all all-am am--refresh check check-am clean clean-generic \
	clean-local dist dist-all dist-bzip2 dist-gzip dist-lzip \
	dist-lzma dist-shar dist-tarZ dist-xz dist-zip distcheck \
	distclean distclean-generic distclean-hdr distcleancheck \
	distdir distuninstallcheck dvi dvi-am html html-am info \
	info-am install install-am install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-generic pdf pdf-am ps ps-am uninstall \
	uninstall-am


#
# Code Optimization levels. Read debug_code option help above.
#

@OPTIMIZATION_O4_TRUE@	o_level = -O3 -ffast-math
@OPTIMIZATION_O4_TRUE@	o_level_nvcc = -O3
@OPTIMIZATION_O3_TRUE@	o_level = -O3
@OPTIMIZATION_O3_TRUE@	o_level_nvcc = -O3
@OPTIMIZATION_O2_TRUE@	o_level = -O2
@OPTIMIZATION_O2_TRUE@	o_level_nvcc = -O2
@OPTIMIZATION_O1_TRUE@	o_level = -O1
@OPTIMIZATION_O1_TRUE@	o_level_nvcc = -O1
@OPTIMIZATION_O0_TRUE@	o_level = -O0
@OPTIMIZATION_O0_TRUE@	o_level_nvcc = -O0

@AVX_TRUE@	arch = -mavx
@AVX_FALSE@@SIMD_TRUE@	arch = -msse4
@AVX_FALSE@@SIMD_FALSE@	arch = -march=native

@PTXAS_OTIMIZATION_TRUE@	PTXAS = --ptxas-options="-O3"

@NVIDIA_ARCHITECTURE_FERMI_TRUE@	NV_ARCHITECTURE = $(PTXAS) -fmad=true -arch=sm_20 -ftz=true -prec-div=false -prec-sqrt=false
@NVIDIA_ARCHITECTURE_FERMI_FALSE@@NVIDIA_ARCHITECTURE_KEPLER_TRUE@	NV_ARCHITECTURE = $(PTXAS) -arch=sm_35
@NVIDIA_ARCHITECTURE_FERMI_FALSE@@NVIDIA_ARCHITECTURE_KEPLER_FALSE@	NV_ARCHITECTURE = $(PTXAS) -gencode=arch=compute_20,code=\"sm_20,compute_20\" -gencode=arch=compute_30,code=\"sm_30,compute_30\" -gencode=arch=compute_35,code=\"sm_35,compute_35\"

#
# Instrumentation with Score-P
#
#

@SCOREP_TRUE@	threads = none
@SCOREP_TRUE@	if OPENMP_ON_CUDA
@SCOREP_TRUE@		threads = omp
@SCOREP_TRUE@	endif
@SCOREP_TRUE@	if OPENMP_ON_OTHERS
@SCOREP_TRUE@		threads = omp
@SCOREP_TRUE@	endif
@SCOREP_TRUE@	scorep_instrumentation_flag =--cuda --mpp=mpi --thread=$(threads) --nopdt
# if SCOREP_CUSTOM
# if SCOREP_PROFILER_MANUAL_INSTRUMENTATION
@SCOREP_TRUE@	scorep_instrumentation_flag =--user --cuda --mpp=mpi --thread=$(threads) --nopdt --online-access --instrument-filter="filter.scorep"
@SCOREP_TRUE@	SCOREP_INSTRUMENTATION = -D_SCOREP_USER_INSTRUMENTATION -DSCOREP_USER_ENABLE
@SCOREP_TRUE@	SCOREP_CPPFLAGS = `scorep-config --cppflags`
@SCOREP_TRUE@	SCOREP_LLIBS = `scorep-config --libs`
@SCOREP_TRUE@	SCOREP_LFLAGS = `scorep-config --ldflags`
# endif
#	export LD_LIBRARY_PATH = $(scorep_custom_basedir)/lib::$(LD_LIBRARY_PATH)
#	libcudart_static_path = -L"`locate libcudart_static.a | tail -1 | sed -e 's,/libcudart_static.a,,'`"
#	libcudart_static_flag = -lcudart_static
#	PROFILER = scorep $(scorep_instrumentation_flag)
#else
#if SCOREP_PROFILER_MANUAL_INSTRUMENTATION
#	scorep_instrumentation_flag =--pomp --cuda --mpp=mpi --thread=$(threads) --nopdt --nocompiler
#endif
#	PROFILER = scorep $(scorep_instrumentation_flag)
#endif
@SCOREP_FALSE@	libcudart_static_path = -L$(NVDIR)/lib64
@SCOREP_FALSE@	libcudart_static_flag = -lcudart

@OPENMP_ON_CUDA_TRUE@	CUDA_OPENMP = -fopenmp

@OPENMP_ON_OTHERS_TRUE@	OPENMP = -fopenmp

@BASIC_PROFING_CUDA_TRUE@	CUDA_INSTRUM = -DINSTRUMENTED

@BASIC_PROFING_OTHERS_TRUE@	INSTRUMENTED = -DINSTRUMENTED

@DEBUG_TRUE@	DEFINES +=-D_DEBUG

@COMPRESSION_TRUE@@SIMD_FALSE@@SIMT_FALSE@ @echo "Compression is enabled, but neither CPU nor GPU compression is set"
@COMPRESSION_TRUE@@SIMD_FALSE@@SIMT_FALSE@ @exit
@COMPRESSION_TRUE@	DEFINES += -D_COMPRESSION
@COMPRESSION_TRUE@@DEBUG_COMPRESSION_TRUE@	DEFINES += -D_COMPRESSIONDEBUG
@COMPRESSION_TRUE@@DEBUG_COMPRESSION_TRUE@	LLIBC = -static-libstdc++
@COMPRESSION_TRUE@@VERIFY_COMPRESSION_TRUE@	DEFINES += -D_COMPRESSIONVERIFY
#
#
# Compression Block
#
#

# 1. CPU/SIMD Compression.
#    CPU with SSE4 support is required. CPU with AVX support is recommended.
#
@COMPRESSION_TRUE@@SIMD_TRUE@	DEFINES += -D_SIMDCOMPRESS
@COMPRESSION_TRUE@@SIMD_TRUE@	INCPATH = -I. -Icompression/cpusimd/include
@COMPRESSION_TRUE@@SIMD_TRUE@	HEADERS = `ls compression/cpusimd/include/*h`
@COMPRESSION_TRUE@@SIMD_FALSE@	INCPATH = -I.
@COMPRESSION_TRUE@@SIMD_FALSE@	HEADERS =
# 2. XXX/XXXX Compression.
# ...
#

#
# Miscellanous
#
#

@CUDA_TRUE@	DEFINE_CUDA = -D_CUDA
@CUDA_TRUE@	bfs_object = cuda_bfs_cuda.o
@CUDA_FALSE@	bfs_object =  cpubfs_bin.o
@CUDA_FALSE@	bfs_implementation = cpubfs_bin.cpp

#if CUSTOM_OPENMPI
#	export OMPI_CC = $(CC)
#	export OMPI_CXX = $(CXX)
#	MPICC = $(custom_openmpi_basedir)/bin/mpicc
#	MPICXX = $(custom_openmpi_basedir)/bin/mpicxx
#else
#	MPICC = mpicc
#	MPICXX = mpicxx
#endif

@QUIET_OUTPUT_TRUE@	Q = @

@DEBUGGING_TRUE@	o_level = -O0
@DEBUGGING_TRUE@	o_level_nvcc = -O0
@DEBUGGING_TRUE@	DEBUG_FLAG=-g
@DEBUGGING_TRUE@	NVCC_DEBUG_FLAGS=-DTHRUST_DEBUG
@DEBUGGING_TRUE@	code_optimization_flags =
# SOURCES = main.cpp generator/utils.c generator/splittable_mrg.c generator/make_graph.c generator/graph_generator.c $(bfs_implementation) validate/onesided.c validate/onesided_emul.c bitlevelfunctions.cpp

@SIMD_TRUE@	COMPRESSION_OBJECTS = bitpacking.o integratedbitpacking.o simdbitpacking.o usimdbitpacking.o simdintegratedbitpacking.o varintdecode.o streamvbyte.o simdpackedsearch.o simdpackedselect.o frameofreference.o for.o
@SIMD_FALSE@	COMPRESSION_OBJECTS =

@COMPRESSION_TRUE@	g500_OBJECTS = $(COMPRESSION_OBJECTS) $(MAIN_OBJECTS)
@COMPRESSION_FALSE@	g500_OBJECTS = $(MAIN_OBJECTS)

#
# Make/ Build rules
#
#
#

all: clean-local g500

main.o: main.cpp validate/validate.h distmatrix2d.hh generator/graph_generator.h generator/user_settings.h validate/mpi_workarounds.h generator/utils.h \
		generator/splittable_mrg.h validate/onesided.h generator/make_graph.h cuda/cuda_bfs.h cuda/cuda_support.hh \
		../b40c/util/basic_utils.cuh ../b40c/graph/bfs/csr_problem_2d.cuh ../b40c/util/cuda_properties.cuh ../b40c/util/memset_kernel.cuh ../b40c/util/cta_work_progress.cuh ../b40c/util/error_utils.cuh \
		../b40c/util/device_intrinsics.cuh ../b40c/util/reduction/warp_reduce.cuh ../b40c/util/operators.cuh ../b40c/util/io/modified_load.cuh ../b40c/util/vector_types.cuh ../b40c/util/io/modified_store.cuh \
		../b40c/util/multiple_buffering.cuh ../b40c/graph/bfs/problem_type.cuh ../b40c/partition/problem_type.cuh ../b40c/radix_sort/sort_utils.cuh \
		../b40c/graph/bfs/enactor_multi_gpu_2d.cuh ../b40c/util/spine.cuh ../b40c/util/kernel_runtime_stats.cuh ../b40c/graph/bfs/enactor_base.cuh \
		../b40c/graph/bfs/two_phase/contract_atomic/kernel.cuh ../b40c/util/cta_work_distribution.cuh ../b40c/graph/bfs/two_phase/contract_atomic/cta.cuh ../b40c/util/scan/cooperative_scan.cuh \
		../b40c/util/srts_grid.cuh ../b40c/util/numeric_traits.cuh ../b40c/util/reduction/cooperative_reduction.cuh ../b40c/util/reduction/serial_reduce.cuh \
		../b40c/util/scan/serial_scan.cuh ../b40c/util/scan/warp_scan.cuh ../b40c/util/io/initialize_tile.cuh ../b40c/util/io/load_tile.cuh \
		../b40c/util/io/store_tile.cuh ../b40c/util/io/scatter_tile.cuh ../b40c/util/reduction/tree_reduce.cuh ../b40c/graph/bfs/two_phase/contract_atomic/kernel_policy.cuh \
		../b40c/util/srts_details.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel.cuh ../b40c/graph/bfs/two_phase/expand_atomic/cta.cuh ../b40c/util/soa_tuple.cuh \
		../b40c/util/scan/soa/cooperative_soa_scan.cuh ../b40c/util/reduction/soa/cooperative_soa_reduction.cuh ../b40c/util/reduction/soa/serial_soa_reduce.cuh ../b40c/util/reduction/soa/warp_soa_reduce.cuh \
		../b40c/util/scan/soa/warp_soa_scan.cuh ../b40c/util/scan/soa/serial_soa_scan.cuh ../b40c/graph/bfs/two_phase/expand_atomic/kernel_policy.cuh ../b40c/util/srts_soa_details.cuh \
		../b40c/graph/bfs/partition_contract/policy.cuh ../b40c/partition/policy.cuh ../b40c/partition/spine/kernel.cuh ../b40c/scan/spine/kernel.cuh \
		../b40c/scan/downsweep/cta.cuh ../b40c/scan/problem_type.cuh ../b40c/reduction/problem_type.cuh ../b40c/scan/kernel_policy.cuh \
		../b40c/partition/upsweep/tuning_policy.cuh ../b40c/partition/downsweep/tuning_policy.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel.cuh ../b40c/graph/bfs/partition_contract/upsweep/cta.cuh \
		../b40c/partition/upsweep/cta.cuh ../b40c/partition/upsweep/aggregate_counters.cuh ../b40c/partition/upsweep/composite_counters.cuh ../b40c/partition/upsweep/tile.cuh \
		../b40c/graph/bfs/partition_contract/upsweep/tile.cuh ../b40c/graph/bfs/partition_contract/upsweep/kernel_policy.cuh ../b40c/partition/upsweep/kernel_policy.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel.cuh \
		../b40c/graph/bfs/partition_contract/downsweep/cta.cuh ../b40c/partition/downsweep/cta.cuh ../b40c/graph/bfs/partition_contract/downsweep/tile.cuh \
		../b40c/partition/downsweep/tile.cuh ../b40c/graph/bfs/partition_contract/downsweep/kernel_policy.cuh ../b40c/partition/downsweep/kernel_policy.cuh \
		../b40c/graph/bfs/copy/kernel.cuh ../b40c/graph/bfs/copy/cta.cuh ../b40c/graph/bfs/copy/kernel_policy.cuh globalbfs.hh bitlevelfunctions.h cpubfs_bin.h \
		compression/cpusimd.hh compression/nocompression.hh
	@echo ""
	@echo "--- Compiling g500"
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) $(SCOREP_INSTRUMENTATION) $(SCOREP_CPPFLAGS) $(INCPATH) -o main.o main.cpp
	@echo "    MPICC     $@"

bitpacking.o: compression/cpusimd/include/bitpacking.h compression/cpusimd/src/bitpacking.cpp
@SIMD_TRUE@	@echo ""
@SIMD_TRUE@	@echo "============================================================================"
@SIMD_TRUE@	@echo "== Compiling"
@SIMD_TRUE@	@echo "============================================================================"
	@echo ""
	@echo "--- Compiling CPU/SIMD compression"
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/bitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

integratedbitpacking.o: compression/cpusimd/include/integratedbitpacking.h compression/cpusimd/src/integratedbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/integratedbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

simdpackedsearch.o:  compression/cpusimd/src/simdpackedsearch.c
	$(Q)$(CC) $(CCFLAGS) -c compression/cpusimd/src/simdpackedsearch.c
	@echo "    CC        $@"

simdpackedselect.o:  compression/cpusimd/src/simdpackedselect.c
	$(Q)$(CC) $(CCFLAGS) -c compression/cpusimd/src/simdpackedselect.c
	@echo "    CC        $@"

streamvbyte.o:  compression/cpusimd/src/streamvbyte.c
	$(Q)$(CC) $(CCFLAGS) -c compression/cpusimd/src/streamvbyte.c
	@echo "    CC        $@"

varintdecode.o:  compression/cpusimd/src/varintdecode.c
	$(Q)$(CC) $(CCFLAGS) -c compression/cpusimd/src/varintdecode.c
	@echo "    CC        $@"

simdbitpacking.o: compression/cpusimd/include/simdbitpacking.h compression/cpusimd/src/simdbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/simdbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

usimdbitpacking.o: compression/cpusimd/include/usimdbitpacking.h compression/cpusimd/src/usimdbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/usimdbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

frameofreference.o: compression/cpusimd/src/frameofreference.cpp $(HEADERS)
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/frameofreference.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

for.o: compression/cpusimd/src/for.c $(HEADERS)
	$(Q)$(CC) $(CCFLAGS) -c compression/cpusimd/src/for.c -Icompression/cpusimd/include
	@echo "    CC        $@"

simdintegratedbitpacking.o: compression/cpusimd/include/simdintegratedbitpacking.h compression/cpusimd/include/delta.h compression/cpusimd/src/simdintegratedbitpacking.cpp
	$(Q)$(CXX) $(CXXFLAGS) -c compression/cpusimd/src/simdintegratedbitpacking.cpp -Icompression/cpusimd/include
	@echo "    CCX       $@"

utils.o: generator/utils.c generator/splittable_mrg.h generator/graph_generator.h generator/user_settings.h generator/utils.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/utils.c
	@echo "    MPICC     $@"

splittable_mrg.o: generator/splittable_mrg.c generator/mod_arith.h generator/user_settings.h generator/mod_arith_64bit.h generator/mod_arith_32bit.h \
		generator/splittable_mrg.h generator/mrg_transitions.c
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/splittable_mrg.c
	@echo "    MPICC     $@"

make_graph.o: generator/make_graph.c generator/graph_generator.h generator/user_settings.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/make_graph.c
	@echo "    MPICC     $@"

graph_generator.o: generator/graph_generator.c generator/user_settings.h generator/splittable_mrg.h generator/graph_generator.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ generator/graph_generator.c
	@echo "    MPICC     $@"

simplecpubfs.o: simplecpubfs.cpp simplecpubfs.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ simplecpubfs.cpp
	@echo "    MPICXX    $@"

onesided.o: validate/onesided.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ validate/onesided.c
	@echo "    MPICC     $@"

onesided_emul.o: validate/onesided_emul.c validate/mpi_workarounds.h validate/onesided.h generator/utils.h generator/splittable_mrg.h
	$(Q)$(MPICC) -c $(MPICFLAGS) -o $@ validate/onesided_emul.c
	@echo "    MPICC     $@"

bitlevelfunctions.o: bitlevelfunctions.h bitlevelfunctions.cpp
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ bitlevelfunctions.cpp
	@echo "    MPICXX    $@"

cpubfs_bin.o: cpubfs_bin.cpp cpubfs_bin.h globalbfs.hh distmatrix2d.hh generator/graph_generator.h generator/user_settings.h
	$(Q)$(MPICXX) -c $(MPICXXFLAGS) -o $@ cpubfs_bin.cpp
	@echo "    MPICXX    $@"

cuda_bfs_cuda.o: cuda/cuda_bfs.cu
	@echo ""
@SIMD_TRUE@	@echo "============================================================================"
@SIMD_TRUE@	@echo "== Compiling"
@SIMD_TRUE@	@echo "============================================================================"
	@echo ""
	@echo "--- Compiling CUDA/BFS"
	$(Q)$(NVCXX) $(NV_ARCHITECTURE) $(NVCC_DEBUG_FLAGS) -c -ccbin $(CXX) -Xcompiler $(NVCXXFLAGS),"`$(MPICXX) -compile_info --showme:compile | sed -e 's,-compile_info,,' -e 's,--showme:compile,,' -e 's,g++,,' -e 's,icpc,,' -e 's,-pthread,,'`" -std=c++11 --compiler-options -fno-strict-aliasing -m64 $(o_level_nvcc) -use_fast_math -I$(NVDIR)/include -I.. cuda/cuda_bfs.cu -o cuda_bfs_cuda.o
	@echo "    NVCC      $@"
	@echo ""

g500:  $(g500_OBJECTS)
	@echo ""
	@echo "============================================================================"
	@echo "== Linking"
	@echo "============================================================================"
	@echo ""
	@echo "--- Linking"
	$(Q)$(LINKER) $(LFLAGS) -o $@ $(g500_OBJECTS) $(OBJCOMP) $(LLIBS)
	echo $(LINKER) $(LFLAGS) -o $@ $(g500_OBJECTS) $(OBJCOMP) $(LLIBS)
	@echo "    MPICXX    $@"

clean-local:
	@echo ""
	@echo "============================================================================"
	@echo "== Cleaning"
	@echo "============================================================================"
	@echo ""
	$(Q)rm -rf $(OUTFILES) $(g500_OBJECTS) 2> /dev/null
	$(Q)rm -rf *~ core *.core g500 2> /dev/null
	@echo "--- Cleaning"

.PHONY: g500 clean-local

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
