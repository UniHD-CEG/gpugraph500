{
  "name": "Gpugraph500",
  "tagline": "A GPU-based Graph500 implementation providing compressed data movements.",
  "body": "# Table Of Contents\r\n- [Introduction](#introduction)\r\n- [Requirements](#requirements)\r\n- [Installation](#installation)\r\n  - [downloading and decompressing:](#downloading-and-decompressing)\r\n  - [using git](#using-git)\r\n- [Build](#build)\r\n- [Run](#run)\r\n  - [Run (using SLURM)](#run-using-slurm)\r\n  - [Run (using MPI)](#run-using-mpi)\r\n- [Profiling](#profiling)\r\n  - [zones](#zones)\r\n  - [system variables](#system-variables)\r\n  - [compression benchmarking tool](#compression-benchmarking-tool)\r\n  - [instrumentation](#instrumentation)\r\n- [Options](#options)\r\n  - [build options](#build-options)\r\n  - [execution options](#execution-options)\r\n  - [currently supported codecs in the gpugraph500 binary](#currently-supported-codecs-in-the-gpugraph500-binary)\r\n- [Troubleshooting](#troubleshooting)\r\n- [Future work](#future-work)\r\n- [Author](#author)\r\n- [License](#license)\r\n- [Resources](#resources)\r\n\r\n\r\n# Introduction\r\nRecent research projects have investigated partitioning, acceleration, and data reduction techniques for improving the performance of Breadth First Search (BFS) and the related HPC benchmark, Graph500. However, few implementations have focused on cloud-based systems like Amazon's Web Services, which differ from HPC systems in several ways, most importantly in terms of network interconnect.\r\n\r\n\r\nThis work looks at optimizations to reduce the communication overhead of an accelerated, distributed BFS on an HPC system and a smaller cloud-like system that contains GPUs. We demonstrate the effects of an efficient 2D partitioning scheme and allreduce implementation, as well as different CPU-based compression schemes for reducing the overall amount of data shared between nodes. Timing and Score-P profiling results demonstrate a dramatic reduction in row and column frontier queue data (up to 91%) and show how compression can improve performance for a bandwidth-limited cluster.\r\n\r\n\r\n\r\n# Requirements\r\n- C compiler. C++ Compiler with c++11 support.\r\n- A MPI implementation: OpenMPI (MPICH2 is not fully supported)\r\n- To use CUDA-BFS or CUDA-compression: CUDA 6+ support.\r\n- To use SIMD compression: SSE2 support (SSE4+ support recommended)\r\n- To use SIMD+ compression SSE2 support. (Optional)\r\n- Scalasca (Score-P) and CUBE4+ for instrumentation and profiling (Optional)\r\n- System packages: `libtool`, `automake`\r\n\r\n# Installation\r\n## downloading and decompressing:\r\n\r\n```\r\n$ wget https://github.com/UniHD-CEG/gpugraph500/archive/master.zip\r\n$ unzip master.zip\r\n$ cd gpugraph500-master\r\n```\r\n\r\n## using git\r\n\r\n```\r\n$ git clone https://github.com/UniHD-CEG/gpugraph500.git\r\n$ cd gpugraph500\r\n```\r\n\r\n# Build\r\nThe code to compile is in the folder `cpu_2d/`. To build the binary:\r\n\r\nFirst build: (or when editing `configure.ac`)\r\n\r\n```\r\n$ cd cpu_2d\r\n$ ./autogen.sh [option1 option2 ...] # ./configure options: (1)\r\n$ make\r\n```\r\n\r\nConsecutive builds:\r\n\r\n```\r\n$ cd cpu_2d\r\n$ ./configure [option1 option2 ...]  # ./configure options (1)\r\n$ make\r\n```\r\n\r\n(1) for further help check the [available options](#build-options) or run `./configure --help`\r\n\r\n# Run\r\n\r\n## Run (using SLURM)\r\n\r\n```\r\n$ cd eval/\r\n$ sbatch o16p8n.rsh 22 # (Replace 22 with Scale Factor)\r\n```\r\n\r\n## Run (using MPIRUN)\r\n\r\n```\r\n$ cd cpu_2d/\r\n$ mpirun -np 16 ../cpu_2d/g500 -s 22 -C 4 -gpus 1 -qs 2 -be \"s4-bp128-d4\" -btr 64 -btc 64\r\n```\r\nSee a full description of the [options](#execution-options) below.\r\n\r\nSee a full description of the [available codecs](#currently-supported-codecs-in-the-gpugraph500-binary) below.\r\n\r\n\r\nruns a test with 16 proccesses in 8 nodes, using Scale Factor 21\r\n\r\n# Profiling\r\nThis application allows the code to be instrumented in zones using Score-P (Scalasca) with low overhead.\r\n\r\n## zones\r\nThe names of the instrumented zones are listed below.\r\n\r\nZone (label)                      | Explanation\r\n--------------------------------- | -------------------------------------------------------------:\r\nBFSRUN_region_vertexBroadcast     |        Initial vertices broadcast (No compression implemented)\r\nBFSRUN_region_localExpansion      |        Predecessor List Reduction (No compression implemented)\r\nBFSRUN_region_columnCommunication |           Column communication phase (Implemented Compression)\r\nBFSRUN_region_rowCommunication    |              Row communication phase (Implemented Compression)\r\nBFSRUN_region_Compression         |      Row Compression (type convertions + Compression encoding)\r\nBFSRUN_region_Decompression       |    Row Compression (type convertions + Decompression encoding)\r\nCPUSIMD_region_encode             |                          Compression or decompression encoding\r\nBFSRUN_region_vreduceCompr        |   Column Compression (type convertions + Compression encoding)\r\nBFSRUN_region_vreduceDecompr      | Column Compression (type convertions + Decompression encoding)\r\n\r\n## system variables\r\nThe following example asumes an installation of CUBE and scalasca in `$HOME/cube` and `$HOME/scorep`\r\n\r\n```\r\n$ cat >> ~/.bashrc << EOF\r\nexport G500_ENABLE_RUNTIME_SCALASCA=yes\r\n\r\nexport SCOREP_CUDA_BUFFER=48M\r\nexport SCOREP_CUDA_ENABLE=no\r\nexport SCOREP_ENABLE_PROFILING=true\r\nexport SCOREP_ENABLE_TRACING=false\r\nexport SCOREP_PROFILING_FORMAT=CUBE4\r\nexport SCOREP_TOTAL_MEMORY=12M\r\nexport SCOREP_VERBOSE=no\r\nexport SCOREP_PROFILING_MAX_CALLPATH_DEPTH=330\r\n\r\nexport LD_LIBRARY_PATH=$HOME/cube/lib:$LD_LIBRARY_PATH\r\nexport PATH=$HOME/cube/bin:$PATH\r\nexport LD_LIBRARY_PATH=$HOME/scorep/lib:$LD_LIBRARY_PATH\r\nexport PATH=$HOME/scorep/bin:$PATH\r\nexport LD_LIBRARY_PATH=$HOME/scorep/lib:$LD_LIBRARY_PATH\r\nexport PATH=$HOME/scorep/bin:$PATH\r\nEOF\r\n```\r\n\r\nThe variable `G500_ENABLE_RUNTIME_SCALASCA` set to yes will enable the required runtime instrumentor of Scalasca.\r\n\r\n\r\n## compression benchmarking tool\r\nSee TurboPFOR in [Resources](#resources)\r\n\r\n## instrumentation\r\nResults will be stored on folders with the format `scorep-*`.\r\n\r\nPossible ways of instrumenting:\r\n\r\n* The provided `scripts/Profiling/Statistics.sh` script. The options must be changed inside the script. Text output\r\n\r\n* Using CUBE (text output)\r\n```\r\n$HOME/cube/bin/cube_stat -p -m time  -r BFSRUN_region_Compression,BFSRUN_region_Decompression,CPUSIMD_region_encode,BFSRUN_region_vreduceCompr,BFSRUN_region_vreduceDecompr profile.cubex\r\n```\r\nFlag -m in ´cube_stat´ may be set to: time or bytes_sent\r\n\r\n\r\n* Using scorep-score (text ouptut)\r\n```\r\n$ scorep-score -r [zone1,zone2,zone3....] profile.cubex\r\n```\r\n\r\nSee the available [zones](#zones) section, for further information.\r\n\r\n* Using CUBE (graphical interface)\r\n```\r\n$ $HOME/cube/bin/cube profile.cubex\r\n```\r\n\r\n\r\n# Options\r\n## currently supported codecs in the gpugraph500 binary\r\n\r\nLemire's SIMDCompression codecs | Notes\r\n------------------------------- | ------------------------------------:\r\nvarintg8iu                      |\r\nfastpfor                        |\r\nvarint                          |\r\nvbyte                           |\r\nmaskedvbyte                     |\r\nstreamvbyte                     |\r\nframeofreference                |\r\nsimdframeofreference            |\r\nvarintgb                        | Based on a talk by Jeff Dean (Google)\r\ns4-fastpfor-d4                  |\r\ns4-fastpfor-dm                  |\r\ns4-fastpfor-d1                  |\r\ns4-fastpfor-d2                  |\r\nbp32                            |\r\nibp32                           |\r\ns4-bp128-d1-ni                  |\r\ns4-bp128-d2-ni                  |\r\ns4-bp128-d4-ni                  |\r\ns4-bp128-dm                     |                 Codec used as default\r\ns4-bp128-d1                     |\r\ns4-bp128-d2                     |\r\ns4-bp128-d4                     |\r\nfor                             |                          Original FOR\r\n\r\n\r\n## build options\r\n```\r\n`configure' configures gpugraph500 1.0 to adapt to many kinds of systems.\r\n\r\nUsage: ./configure [OPTION]... [VAR=VALUE]...\r\n\r\nTo assign environment variables (e.g., CC, CFLAGS...), specify them as\r\nVAR=VALUE.  See below for descriptions of some of the useful variables.\r\n\r\nDefaults for the options are specified in brackets.\r\n\r\nConfiguration:\r\n  -h, --help              display this help and exit\r\n      --help=short        display options specific to this package\r\n      --help=recursive    display the short help of all the included packages\r\n  -V, --version           display version information and exit\r\n  -q, --quiet, --silent   do not print `checking ...' messages\r\n      --cache-file=FILE   cache test results in FILE [disabled]\r\n  -C, --config-cache      alias for `--cache-file=config.cache'\r\n  -n, --no-create         do not create output files\r\n      --srcdir=DIR        find the sources in DIR [configure dir or `..']\r\n\r\nInstallation directories:\r\n  --prefix=PREFIX         install architecture-independent files in PREFIX\r\n                          [/usr/local]\r\n  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\r\n                          [PREFIX]\r\n\r\nBy default, `make install' will install all the files in\r\n`/usr/local/bin', `/usr/local/lib' etc.  You can specify\r\nan installation prefix other than `/usr/local' using `--prefix',\r\nfor instance `--prefix=$HOME'.\r\n\r\nFor better control, use the options below.\r\n\r\nProgram names:\r\n  --program-prefix=PREFIX            prepend PREFIX to installed program names\r\n  --program-suffix=SUFFIX            append SUFFIX to installed program names\r\n  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names\r\n\r\nSystem types:\r\n  --build=BUILD     configure for building on BUILD [guessed]\r\n  --host=HOST       cross-compile to build programs to run on HOST [BUILD]\r\n\r\nOptional Features:\r\n  --disable-option-checking  ignore unrecognized --enable/--with options\r\n  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\r\n  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\r\n  --disable-dependency-tracking  speeds up one-time build\r\n  --enable-dependency-tracking   do not reject slow dependency extractors\r\n  --enable-bfs-basic-profiling\r\n                          It is related with instrumentation. Displays\r\n                          statistical data on each BFS run. (Enabled by\r\n                          default)\r\n  --enable-other-basic-profiling\r\n                          It is related with instrumentation. Displays\r\n                          gpugraph500 default statistics. (Enabled by default)\r\n  --enable-scorep         It is related with instrumentation. Enables\r\n                          instrumentation with Scalasca/ScoreP. ScoreP must be\r\n                          detected by ./configure. (Disabled by default)]\r\n  --enable-compression    It is related with data compression. Enables data\r\n                          compression through the network. This option is\r\n                          available only when --enable-cuda (BFS runs using\r\n                          CUDA) is active (default). (Enabled by default)\r\n  --enable-simd           It is related with data compression. MPI packets\r\n                          will be sent compressed using the PFOR-delta D.\r\n                          Lemire SIMDCompression library. It is only active if\r\n                          --enable-compression is selected. It will be enabled\r\n                          by default if --enable-compression is active and no\r\n                          compression method is selected. (Enabled by default)\r\n  --enable-simd+          It is related with data compression. MPI packets\r\n                          will be sent compressed using a PFOR-delta improved\r\n                          library: Turbo-PFOR. It is only active if\r\n                          --enable-compression is selected. (Disabled by\r\n                          default)\r\n  --enable-simt           It is related with data compression. Use CUDA\r\n                          implementation for data compression. Not implemented\r\n                          yet. (Disabled by default)\r\n  --enable-debug-compression\r\n                          It is related with data compression. Shows\r\n                          statistics of compression rate, time of compression,\r\n                          codec, ETC. (Disabled by default)\r\n  --enable-verify-compression\r\n                          It is related with data compression. Sends both\r\n                          compressed and decompressed data through the\r\n                          network. Checks decompression after transmission.\r\n                          (Disabled by default)\r\n  --enable-aggressive-optimizations\r\n                          It is related with optimizations. Enables aggressive\r\n                          compiler optimizations on the compiler. (Disabled\r\n                          by default)\r\n  --enable-openmp         It is related with optimizations. Enables or\r\n                          disables both --enable-cuda-openmp and\r\n                          --enable-general-openmp. This option overrides both\r\n                          openmp settings. (Not set by default)\r\n  --enable-cuda-openmp    Related with optimizations. Selects whether OpenMP\r\n                          will be enabled. This option applies to CUDA C\r\n                          files. (Disabled by default)\r\n  --enable-general-openmp It is related with optimizations. Selects whether\r\n                          OpenMP will be enabled. This option applies to\r\n                          general C and C++ files. (Disabled by default)\r\n  --enable-cuda           Use the CUDA implementation of the BFS runs.\r\n                          Requires NVIDIA hardware support. Enabled by default\r\n  --enable-ptxa-optimizations\r\n                          It is related with optimizations. Selects whether\r\n                          CUDA assembly (PTXAS) will be optimized or not. This\r\n                          option will only be used if --enable-cuda is present\r\n                          (default). The default PTXAS optimization is -O3.\r\n                          (Disabled by default)\r\n  --enable-nvidia-architecture= fermi|kepler|auto|detect\r\n                          Selects the NVIDIA target architecture. Requires --enable-cuda to be selected (default). Default option is 'detect'. In case detection does not succeed 'all'\r\n                          mode is selected.\r\n  --enable-debug          Provides extra traces at runtime. (Disabled by\r\n                          default)\r\n  --enable-debugging      It is related with debugging. Enables -g option on\r\n                          compiler (debugging). (Disabled by default)\r\n  --enable-quiet          It is related with debugging. Disable compile\r\n                          mensages when running make. (Disabled by default)\r\n  --enable-portable-binary\r\n                          disable compiler optimizations that would produce\r\n                          unportable binaries\r\n  --enable-cc-warnings= no|minimum|yes|maximum|error\r\n                          Turn on C compiler warnings. Default selection is\r\n                          maximum\r\n  --enable-iso-c          Try to warn if code is not ISO C\r\n  --enable-cxx-warnings= no|minimum|yes|maximum|error\r\n                          Turn on C++ compiler warnings. Default selection is\r\n                          maximum\r\n  --enable-iso-cxx        Try to warn if code is not ISO C++\r\n\r\nOptional Packages:\r\n  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\r\n  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\r\n  --with-mpi=<path>       absolute path to the MPI root directory. It should\r\n                          contain bin/ and include/ subdirectories.\r\n  --with-mpicc=mpicc      name of the MPI C++ compiler to use (default mpicc)\r\n  --with-mpicxx=mpicxx    name of the MPI C++ compiler to use (default mpicxx)\r\n  --with-cuda=<path>      Use CUDA library. If argument is <empty> that means\r\n                          the library is reachable with the standard search\r\n                          path \"/usr\" or \"/usr/local\" (set as default).\r\n                          Otherwise you give the <path> to the directory which\r\n                          contain the library.\r\n  --with-gcc-arch=<arch>  use architecture <arch> for gcc -march/-mtune,\r\n                          instead of guessing\r\n  --with-opencl=<path>    prefix to location of OpenCL include directory\r\n                          [default=auto]\r\n  --with-scorep=<path>    Use SCOREP profiler. If argument is <empty> that\r\n                          means the library is reachable with the standard\r\n                          search path (set as default). Otherwise you give the\r\n                          <path> to the directory which contain the library.\r\n\r\nSome influential environment variables:\r\n  CXXFLAGS    C++ compiler flags\r\n  CFLAGS      C compiler flags\r\n  CXX         C++ compiler command\r\n  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\r\n              nonstandard directory <lib dir>\r\n  LIBS        libraries to pass to the linker, e.g. -l<library>\r\n  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\r\n              you have headers in a nonstandard directory <include dir>\r\n  CC          C compiler command\r\n  CPP         C preprocessor\r\n  DOXYGEN_PAPER_SIZE\r\n              a4wide (default), a4, letter, legal or executive\r\n\r\nUse these variables to override the choices made by `configure' or to help\r\nit to find libraries and programs with nonstandard names/locations.\r\n\r\nReport bugs to the package provider.\r\n```\r\n\r\n## execution options\r\n* -s Number - (SCALE_FACTOR)\r\n* -C Number - (2^SCALE_FACTOR) - This is also the value used in the the -np flag of `mpirun`\r\n* -gpus Number - Number of GPUs per node. Currently, only the value 1 is fully tested.\r\n* -qs Number - Queue size as in B40C implementation, from 1 to 2 (e.g. 1.3).\r\n* -be \"Codec\" - [Codec](#currently-supported-codecs-in-the-gpugraph500-binary) used when compression is enabled (--enable-compression)\r\n* -btc Number - Row Threshoold number: Frontier queue minimum size at which compression would start. Allows disabling compression for small queue sizes.\r\n\r\ne.g. `g500 -s 22 -C 4 -gpus 1 -qs 1.1 -be \"s4-bp128-d4\" -btc 64`\r\n\r\n\r\n# Troubleshooting\r\n- Q: In the .out file of Slurm/ Sbatch execution I get the text:\r\n\r\n```\r\nS=C=A=N: Abort: No SCOREP instrumentation found in target ../cpu_2d/g500\r\n```\r\n\r\n- A:\r\nThe instrumentation is activated for the runtime execution (i.e: the binary is being run prefixed with scalasca).\r\n\r\nDisable with:\r\n\r\n```\r\n$ export G500_ENABLE_RUNTIME_SCALASCA=no\r\n```\r\n\r\n# Authors\r\n\r\nComputer Engineering Group at Ruprecht-Karls University of Heidelberg\r\nand\r\nSchool of Computer Science at Georgia Institute of Technology\r\n\r\n# License\r\n- Duane Merrill's BC40 (back40computing) is licenced under [Apache 2 Licence.](https://github.com/UniHD-CEG/gpugraph500/tree/master/b40c/LICENSE.TXT)\r\n- SIMDcompressionAndIntersection is licenced under [Apache 2 Licence.](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/cpusimd/LICENSE)\r\n- Alenka GPU database engine is licensed under [Apache 2 License.](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/gpusimt/cudacompress.cu)\r\n\r\n\r\nCopyright (c) 2016, Computer Engineering Group at Ruprecht-Karls University of Heidelberg, Germany. All rights reserved. Licensed under GNU/GPL version 3 -  https://www.gnu.org/licenses/gpl-3.0\r\n\r\n# Future work\r\n\r\n* Embed the [compression encoding routines](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/cpusimd/include/codecfactory.h#L106) in the [communication module](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/globalbfs.hh#L536) (e.g. by using lambda functions). The [current implementation](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/compression.hh#L15) does not allow code inlining by the Linker (due to the use of the `virtual` keyword).\r\n\r\n* Remove [types convertion](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/cpusimd.hh#L93) in the compression calls (Using a [GPU PFOR-compression implementation?](https://github.com/UniHD-CEG/gpugraph500/blob/master/cpu_2d/compression/gpusimt/cudacompress.cu#L196)).\r\n\r\n# Resources\r\n[D. Lemire's SIMDCompression](https://github.com/lemire/SIMDCompressionAndIntersection)\r\n\r\n[TurboPFOR SIMDCompression and Codec Benchmarking tool](https://github.com/powturbo/TurboPFor)\r\n\r\n[Alenka's CUDA–PFOR Compression](https://github.com/antonmks/Alenka/blob/master/compress.cu)\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}